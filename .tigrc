# main view の左端にコミットIDを表示する
set main-view = id date author:email-user commit-title:graph=yes,refs=yes

# blame view の行数表示をON、intervalを1に
set blame-view  = date:default author:email-user id:yes,color line-number:yes,interval=1 text

# Pager系の行数表示をON、intervalを1に (default: line-number:no,interval=5)
set pager-view  = line-number:yes,interval=1 text
set stage-view  = line-number:yes,interval=1 text
set log-view    = line-number:yes,interval=1 text
set blob-view   = line-number:yes,interval=1 text
set diff-view   = line-number:yes,interval=1 text:yes,commit-title-overflow=no

# 横分割に強制する
set vertical-split = yes
set split-view-height = 90%
set split-view-width = 90%

# utf-8 文字で画面描画する (~でトグル)
set line-graphics = utf-8

# タブサイズ
set tab-size = 4

# # 空白無視
# set ignore-space = all

# 空白無視 (status-view では表示するが diff-view では無視する) (W でトグル)
set ignore-space = at-eol

# マージ diff を表示する
set diff-options = -m --first-parent

# '+行数' の形で Editor に行番号を引数として渡すか
set editor-line-number = yes

# リフレッシュするタイミング
set refresh-mode = auto
#set refresh-mode = after-command
#set refresh-mode = periodic
#set refresh-interval = 1

# 差分表示に diff-highlight を使う (要 tig 2.2.1 以降. diff-highlight が $PATH にあること)
#set diff-highlight = true

# カラー設定
# diff-view で境界が見やすくなるように変更
color  diff-header       default magenta
color  diff-chunk        black   white

# コマンドラインのディフォルト引数
set main-options = --exclude=refs/stash --all

# rebase -i をしやすくする
bind main    R !git rebase -i %(commit)
bind diff    R !git rebase -i %(commit)

# フェッチ
bind generic F      ?git fetch %(remote)
bind main    F      ?git fetch %(remote)

# スタッシュ
bind generic S      ?git stash save "%(prompt Enter stash comment: )"
# ポップ (stash画面にキーバインドを追加)
bind stash   Y      ?git stash pop %(stash)

# リセット(soft)
# bind generic ^      ?git reset --soft HEAD^
# リセット(hard)
# bind main    H      ?git reset --hard %(commit)
# bind diff    H      ?git reset --hard %(commit)
# bind status  H      ?git reset --hard HEAD

# D でブランチを削除 (マージ済みブランチのみ. 強制削除(branch -D) は `!`) (refs-view)
bind refs    D      ?git branch -d %(branch)
# D でトラッキングされていないファイルを削除 (status-view)
bind status  D      ?git clean -d -f -- %(file)
# D で stash を削除 (`!` と同じ) (stash-view)
bind stash   D      ?git stash drop %(stash)
# D でファイルを削除 (tree-view)
bind tree    D      ?git rm %(file)
# x でトラッキングされていないファイルをすべて削除
bind main    x      ?git clean -d -f
bind status  x      ?git clean -d -f
# x でマージ済みローカルブランチをすべて削除 (master/develop 除く)
bind refs    x      ?sh -c "git branch --merged | grep -vE '^\\*|master$|develop$' | xargs -I % git branch -d %"

# B でブランチを作成してそのブランチに移動 (checkout -b)
bind main    B      ?git checkout -b "%(prompt Enter branch name: )" %(branch)

# T で tag
bind main    T ?git tag "%(prompt Enter tag name: )" %(commit)
